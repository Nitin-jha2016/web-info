[{"C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\index.js":"1","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\App.js":"2","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Login.js":"3","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Dashboard.js":"4","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Home.js":"5","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Navbar.js":"6","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpData.js":"7","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\DbBackup.js":"8","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\SSLData.js":"9","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpRecordModal.js":"10","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpRecordTable.js":"11"},{"size":416,"mtime":1613460624883,"results":"12","hashOfConfig":"13"},{"size":20519,"mtime":1614603984043,"results":"14","hashOfConfig":"13"},{"size":1295,"mtime":1613127448230,"results":"15","hashOfConfig":"13"},{"size":733,"mtime":1614085059843,"results":"16","hashOfConfig":"13"},{"size":15139,"mtime":1614576953023,"results":"17","hashOfConfig":"13"},{"size":1785,"mtime":1613472919387,"results":"18","hashOfConfig":"13"},{"size":13742,"mtime":1614603201673,"results":"19","hashOfConfig":"13"},{"size":16460,"mtime":1614577571744,"results":"20","hashOfConfig":"13"},{"size":11156,"mtime":1614585318210,"results":"21","hashOfConfig":"13"},{"size":7016,"mtime":1614605024914,"results":"22","hashOfConfig":"13"},{"size":1178,"mtime":1614171587480,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"6g5yco",{"filePath":"28","messages":"29","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"27"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},"C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\index.js",["56","57"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport HttpsRedirect from 'react-https-redirect';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HttpsRedirect>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n    </HttpsRedirect>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n",["58","59"],"C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\App.js",["60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76"],"C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Login.js",["77","78","79"],"import React from \"react\";\r\nimport \"../Components/Login.css\";\r\nimport { MdLock } from \"react-icons/md\";\r\nimport { MyContext } from \"../App\";\r\n\r\nfunction Login() {\r\n  const {\r\n    handleLogIn,\r\n    isLoggedin,\r\n    token,\r\n    settoken,\r\n    username,\r\n    setusername,\r\n    password,\r\n    setpassword,\r\n  } = React.useContext(MyContext);\r\n  // console.log('My Context',context);\r\n  const SubmitHandler = (e) => {\r\n      e.preventDefault();\r\n    handleLogIn();\r\n  };\r\n  return (\r\n    <div className=\"container-fluid login-container\">\r\n      <form className=\"login\" onSubmit={SubmitHandler}>\r\n        {/* <div className=\"input-group\"> */}\r\n        <MdLock className=\"login-icon\" />\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          placeholder=\"Username\"\r\n          value={username}\r\n          onChange={(e) => setusername(e.target.value)}\r\n        ></input>\r\n        <input\r\n          type=\"password\"\r\n          class=\"form-control\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onChange={(e) => setpassword(e.target.value)}\r\n        ></input>\r\n        <button className=\"btn btn-primary login-btn\" type=\"submit\">\r\n          Log In\r\n        </button>\r\n        {/* </div> */}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Dashboard.js",["80","81"],"import React from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport Home from \"./Home\";\r\nimport SSLData from \"./SSLData\";\r\nimport DbBackup from \"./DbBackup\";\r\nimport EmpData from \"./EmpData\";\r\nimport Navbar from \"./Navbar\";\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div className=\"container table-container\">\r\n      <Navbar />\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact></Route>\r\n        <Route path=\"/ssldata\" component={SSLData}></Route>\r\n        <Route path=\"/dbbackup\" component={DbBackup}></Route>\r\n        <Route path=\"/empdata\" component={EmpData}></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Home.js",["82","83","84","85","86","87","88","89","90","91","92","93"],"import React from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport { MyContext } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport DataTable,{createTheme}from \"react-data-table-component\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"./Home.css\";\r\n\r\nimport { ButtonExportExcel } from '@alckor127/react-button-export-excel'\r\nimport '@alckor127/react-button-export-excel/dist/index.css'\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\n\r\n\r\nconst TextField = styled.input`\r\n  height: 32px;\r\n  width: 200px;\r\n  border-radius: 3px;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border: 1px solid #e5e5e5;\r\n  padding: 0 32px 0 16px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst FilterComponent = ({ filterText, onFilter, onClear }) => (\r\n  <>\r\n    <TextField\r\n      id=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Filter By Name\"\r\n      aria-label=\"Search Input\"\r\n      value={filterText}\r\n      onChange={onFilter}\r\n    />\r\n    <button className=\"clear-btn\" type=\"button\" onClick={onClear}>\r\n      X\r\n    </button>\r\n  </>\r\n);\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n\r\n  const {\r\n    siteData,\r\n    token,\r\n    id,\r\n    setid,\r\n    siteUrl,\r\n    setsiteUrl,\r\n    sitePath,\r\n    setsitePath,\r\n    ip,\r\n    setip,\r\n    sizeFolder,\r\n    setsizeFolder,\r\n    operator,\r\n    setoperator,\r\n    country,\r\n    setcountry,\r\n    backupIp,\r\n    setbackupIp,\r\n    backupSize,\r\n    setbackupSize,\r\n    backupPath,\r\n    setbackupPath,\r\n    insertSiteData,\r\n    updateSiteData,\r\n    modalType,\r\n    clearInputs,\r\n\r\n    isChecked,\r\n    setisChecked,\r\n    sitePort,\r\n    setsitePort,\r\n    setModalShow\r\n\r\n  } = React.useContext(MyContext);\r\n\r\n  React.useEffect(()=>{\r\n    // alert(2)\r\n\r\n    // setbackupSize('')\r\n    // setcountry('')\r\n    // setip('')\r\n    // setoperator('')\r\n    // setbackupPath('')\r\n    // setsitePath('')\r\n    // setsiteUrl('')\r\n    // setsizeFolder('')\r\n    // setbackupIp('')\r\n},[])\r\n\r\n  React.useEffect(()=>{\r\n    // alert(1)\r\n    if(siteData.length !== 0 && id && modalType ==='update'){\r\n      console.log('site Data',siteData);\r\n      const filteredData = siteData.filter(data => data.id == id)\r\n      console.log('Fi%%%%%%%ltered Data',filteredData);\r\n\r\n      setbackupSize(filteredData[0].backup_size)\r\n      setcountry(filteredData[0].country)\r\n      setip(filteredData[0].ip)\r\n      setoperator(filteredData[0].operator)\r\n      setbackupPath(filteredData[0].backup_path)\r\n      setsitePath(filteredData[0].site_path)\r\n      setsiteUrl(filteredData[0].site_url)\r\n      setsizeFolder(filteredData[0].size_folder)\r\n      setbackupIp(filteredData[0].backup_ip)\r\n      setisChecked(filteredData[0].status)\r\n      setsitePort(filteredData[0].port)\r\n    }else{\r\n      clearInputs()\r\n      // alert('inputs cleared')\r\n    }\r\n  },[modalType,id])\r\n\r\n  \r\nconsole.log('Modal Type',modalType);\r\n  return (\r\n    \r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"modal\"\r\n    >\r\n      <Modal.Title id=\"contained-modal-title-vcenter\">\r\n        SITE URL PATHS\r\n      </Modal.Title>\r\n\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Site URL</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"URL\"\r\n              value={siteUrl}\r\n              onChange={(e) => setsiteUrl(e.target.value)}\r\n              required\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Path</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"path\"\r\n              value={sitePath}\r\n              onChange={(e) => setsitePath(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Size of folder</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"Size of folder\"\r\n              value={sizeFolder}\r\n              onChange={(e) => setsizeFolder(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Operator</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Operator\"\r\n              value={operator}\r\n              onChange={(e) => setoperator(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Country</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              value={country}\r\n              onChange={(e) => setcountry(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Backup IP</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Backup IP\"\r\n              value={backupIp}\r\n              onChange={(e) => setbackupIp(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Backup Size</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Backup Size\"\r\n              value={backupSize}\r\n              onChange={(e) => setbackupSize(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Backup Path</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputPassword4\"\r\n              placeholder=\"Backup Path\"\r\n              value={backupPath}\r\n              onChange={(e) => setbackupPath(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col\">\r\n            <label for=\"inputPassword4\">IP</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"IP\"\r\n              value={ip}\r\n              onChange={(e) => setip(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col\">\r\n            <label for=\"inputPassword4\">PORT</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"IP\"\r\n              value={sitePort}\r\n              onChange={(e) => setsitePort(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col text-center inputCheckbox\">\r\n            <label for=\"inputPassword4\">Status: &nbsp; </label>\r\n            <input\r\n              type=\"checkbox\"\r\n              // className=\"inputCheck\"\r\n              placeholder=\"IP\"\r\n              checked={isChecked}\r\n              onChange={() => setisChecked(!isChecked)                \r\n              }\r\n            ></input>\r\n            {console.log('ISCHECKED',isChecked)}\r\n          </div>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n    {modalType == \"add\" &&  <Button\r\n          onClick={() => {\r\n                 props.onHide()\r\n            insertSiteData(\r\n              token,\r\n              siteUrl,\r\n              sitePath,\r\n              ip,\r\n              sizeFolder,\r\n              operator,\r\n              country,\r\n              backupIp,\r\n              backupSize,\r\n              backupPath,\r\n              sitePort,\r\n              isChecked\r\n ); \r\n          }}\r\n        >\r\n          Save\r\n        </Button>}\r\n       {modalType === 'update' && <Button\r\n          onClick={() => {\r\n            props.onHide()\r\n          updateSiteData(\r\n              token,\r\n              id,\r\n              siteUrl,\r\n              sitePath,\r\n              ip,\r\n              sizeFolder,\r\n              operator,\r\n              country,\r\n              backupIp,\r\n              backupSize,\r\n              backupPath,\r\n              sitePort,\r\n              isChecked);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>}\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n \r\n  const { siteData, isloading,modalShow,setModalShow,setid,setmodalType,clearInputs,deleteSiteUrl,setsslUrl,setpath,setsslDate,isAdmin, selectedFile, setSelectedFile, isFilePicked,setisFilePicked, importData, token} = React.useContext(MyContext);\r\n\r\nlet columns = [\r\n  {\r\n    name: 'site_url',\r\n    selector: 'site_url',\r\n    wrap: true,\r\n    width: '250px'\r\n  },\r\n  {\r\n    name: 'site_path',\r\n    selector: 'site_path',\r\n    wrap: true,\r\n    width: '390px',\r\n  },\r\n  {\r\n    name: 'ip',\r\n    selector: 'ip',\r\n    wrap: true,\r\n    width: '180px'\r\n  },\r\n  {\r\n    name: 'port',\r\n    selector: 'port',\r\n    wrap: true\r\n  },\r\n  {\r\n    name: 'country',\r\n    selector: 'country',\r\n    wrap: true,\r\n  },\r\n  {\r\n    name: 'size_folder',\r\n    selector: 'size_folder',\r\n    wrap: true\r\n  },\r\n  {\r\n    name: 'backup_path',\r\n    selector: 'backup_path',\r\n    wrap: true,\r\n    width: '200px'\r\n  },\r\n  {\r\n    name: 'backup_ip',\r\n    selector: 'backup_ip',\r\n    wrap: true,\r\n    width: '120px'\r\n  },\r\n  {\r\n    name: 'backup_size',\r\n    selector: 'backup_size',\r\n    wrap: true\r\n  },\r\n    \r\n\r\n];\r\n\r\ncolumns.push({\r\n         name: 'status',\r\n        cell: (row) => (\r\n          <input type=\"checkbox\" checked={Boolean(row.status)}></input>\r\n          // <p>{console.log('row',row)}</p>\r\n         ),\r\n         width: '80px'\r\n        });\r\n\r\n\r\n\r\n       columns.unshift({\r\n          name: '#',\r\n         selector: 'key',\r\n          ignoreRowClick: true,\r\n          allowOverflow: true,\r\n          width: '50px'\r\n      \r\n        });\r\n\r\n\r\n  console.log('IS ADMIN',isAdmin);\r\nif(isAdmin){\r\n\r\n\r\n  const editHandler=(id)=>{\r\n    // console.log('ROW',id);\r\n    // alert(id)\r\n    setid(id)\r\n    setModalShow(true)\r\n    setmodalType('update')\r\n  }\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => editHandler(row.id)}>\r\n        <AiOutlineEdit/>\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <>\r\n        <button className=\"btn btn-danger\" onClick={()=>{\r\n          setid(row.id)\r\n          // alert(row.id)\r\n          let r = window.confirm(\"Are you sure??\"); \r\n          if(r){\r\n            deleteSiteUrl(row.id)\r\n          }\r\n         \r\n         \r\n        }}><MdDelete/></button>\r\n      </>\r\n\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n}\r\n\r\n  // console.log(\"COLUMNS: \", columns);\r\n  // console.log(\"DATA\", siteData);\r\n\r\n  const [filterText, setFilterText] = React.useState(\"\");\r\n\r\n  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(\r\n    false\r\n  );\r\n  // console.log('SIte Daata',siteData);\r\n\r\n  siteData?.forEach((item,index) => {\r\n    item.key = index + 1\r\n })\r\n\r\n  const filteredItems = siteData?.filter(\r\n    (item) =>\r\n    {\r\n     return (\r\n        item.site_path.toLowerCase().includes(filterText.toLowerCase())) ||\r\n      (item.site_url.toLowerCase().includes(filterText.toLowerCase())) ||\r\n      (item.ip.includes(filterText)) \r\n\r\n    }\r\n     \r\n  \r\n  );\r\n\r\n  console.log('SELECTED FILE',selectedFile);\r\n\r\n  // const toggleModal = () => {\r\n  //   setModalShow(true);\r\n  //   console.log(\"modalShow\", modalShow);\r\n  // };\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    const handleClear = () => {\r\n      if (filterText) {\r\n        setResetPaginationToggle(!resetPaginationToggle);\r\n        setFilterText(\"\");\r\n      }\r\n    };\r\n\r\n    const changeHandler = (event) => {\r\n      console.log('event.target.files',event.target.files)\r\n      setSelectedFile(event.target.files[0]);\r\n      setisFilePicked(true);\r\n    };\r\n \r\n\r\n    console.log(\"modalShow\", modalShow);\r\n    return (\r\n      <div className=\"btn-container\">\r\n          \r\n          {isAdmin && <div><input type=\"file\" name=\"file\" onChange={changeHandler}></input><button className=\"btn btn-primary\" onClick={()=> importData(token,1,selectedFile)}>Import</button></div>}\r\n\r\n       {isAdmin && <button onClick={() => {         \r\n          \r\n          setmodalType('add')\r\n          setModalShow(true)\r\n          // clearInputs()\r\n    \r\n          }} className=\"btn btn-primary\">Add Data</button>}\r\n\r\n     \r\n\r\n         {/* {isAdmin && <ButtonExportExcel outline data={siteData} filename='example'>\r\n        ¡Export now!\r\n      </ButtonExportExcel>\r\n} */}\r\n\r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n        <FilterComponent\r\n          onFilter={(e) => setFilterText(e.target.value)}\r\n          onClear={handleClear}\r\n          filterText={filterText}\r\n        />\r\n      </div>\r\n    );\r\n  }, [filterText, resetPaginationToggle, modalShow,selectedFile]);\r\n\r\n  createTheme('solarized', {\r\n    text: {\r\n      primary: 'rgba(0,0,0)',\r\n      secondary: '#fff',\r\n    },\r\n    background: {\r\n      // default: '#002b36',\r\n    },\r\n    context: {\r\n      background: '#cb4b16',\r\n      text: '#FFFFFF',\r\n    },\r\n    divider: {\r\n      default: 'rgba(0,0,0,.7)',\r\n    },\r\n    action: {\r\n      button: 'rgba(0,0,0,.54)',\r\n      hover: 'rgba(0,0,0,.08)',\r\n      disabled: 'rgba(0,0,0,.12)',\r\n    },\r\n  });\r\n const newCol = columns.filter(col => col.name !== '#')\r\n console.log('fsfsfsfsf',newCol);\r\n  return (\r\n    <>\r\n     <DataTableExtensions\r\n       columns={columns}\r\n       data={filteredItems}\r\n       exportHeaders= {true}\r\n      >\r\n     <DataTable\r\n        title=\"Running Websites on Server\"\r\n        columns={columns}\r\n        data={filteredItems}\r\n        pagination\r\n        paginationTotalRows={siteData.length}\r\n        paginationPerPage= {10}\r\n        // paginationRowsPerPageOptions= {10}\r\n        paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1\r\n        subHeader\r\n        subHeaderComponent={subHeaderComponentMemo}\r\n        persistTableHead\r\n        progressPending={isloading}\r\n        theme='solarized'\r\n        // export\r\n      />\r\n      </DataTableExtensions>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\Navbar.js",["94","95","96","97"],"import React from \"react\";\r\nimport \"./Navbar.css\";\r\nimport { BiLogOut } from \"react-icons/bi\";\r\nimport { MyContext } from \"../App\";\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n  const {\r\n    data,\r\n    ssl,\r\n    isalertOpen,\r\n    setisalertOpen,\r\n    logOut,\r\n    expiredSSL,\r\n  } = React.useContext(MyContext);\r\n\r\n  return (\r\n    <div className=\"nav-buttons\">\r\n      <div>\r\n      {/* {console.log('SSl',ssl)} */}\r\n      {/* {ssl.length || expiredSSL.length > 0 ? ( */}\r\n      <Link to=\"/\" class=\"btn btn-primary\">\r\n        Site URL Paths\r\n      </Link>\r\n\r\n      <Link to=\"/ssldata\" class=\"btn btn-primary\">\r\n        SSL &nbsp;\r\n        <span className=\"badge\" onClick={() => setisalertOpen(!isalertOpen)}>\r\n          {ssl.length + expiredSSL.length}\r\n        </span>\r\n      </Link>\r\n      {isalertOpen && (\r\n        <div class=\"alert alert-danger\" role=\"alert\">\r\n          <h4>SSL's going expiring soon:</h4>\r\n          <ul>\r\n            {ssl.map((item) => {\r\n              return <li>{item.ssl_url}</li>;\r\n            })}\r\n          </ul>\r\n          <h4>Expired SSL's:</h4>\r\n          <ul>\r\n            {expiredSSL.map((item) => {\r\n              return <li>{item.ssl_url}</li>;\r\n            })}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <Link to=\"/dbbackup\" class=\"btn btn-primary\">\r\n        Database Backup\r\n      </Link>\r\n      <Link to=\"/empdata\" class=\"btn btn-primary\">\r\n        Employee Data\r\n      </Link>\r\n      </div>\r\n      {/* <button type=\"button\" class=\"btn btn-primary\">\r\n        Database Backup\r\n      </button> */}\r\n      <div>\r\n      <button class=\"btn btn-danger\" onClick={() => logOut()}>\r\n        Logout <BiLogOut />\r\n      </button>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpData.js",["98","99","100","101","102","103","104","105","106","107"],"\r\n\r\nimport React,{useState} from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport { MyContext } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport DataTable,{createTheme} from \"react-data-table-component\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport \"./Home.css\";\r\nimport EmpRecordModal from \"./EmpRecordModal\";\r\n\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\n\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nconst TextField = styled.input`\r\n  height: 32px;\r\n  width: 200px;\r\n  border-radius: 3px;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border: 1px solid #e5e5e5;\r\n  padding: 0 32px 0 16px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst FilterComponent = ({ filterText, onFilter, onClear }) => (\r\n  <>\r\n    <TextField\r\n      id=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Filter By Name\"\r\n      aria-label=\"Search Input\"\r\n      value={filterText}\r\n      onChange={onFilter}\r\n    />\r\n    <button className=\"clear-btn\" type=\"button\" onClick={onClear}>\r\n      X\r\n    </button>\r\n  </>\r\n);\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n\r\n  const {isChecked,setisChecked,clearInputs,modalType,token,getempData,id,empData,  empName, setempName, project, setproject, backupDestination, setbackupDestination, lastUpdate, setlastUpdate} = React.useContext(MyContext)\r\n\r\n\r\n\r\n  React.useEffect(()=>{\r\n    \r\n\r\n    if(empData && empData.length !== 0 && id && modalType ==\"edit\" ){ \r\n      console.log('empData Data',empData);\r\n      const filteredData = empData.filter(data => data.id == id)\r\n      console.log('Filtered Data',filteredData[0]);\r\nif(filteredData[0]){\r\n      setempName(filteredData[0].Emp_name)\r\n      setbackupDestination(filteredData[0].backup_desti)\r\n      setproject(filteredData[0].project)\r\n      setlastUpdate(filteredData[0].last_update)\r\n      setisChecked(filteredData[0].status)\r\n}\r\n     \r\n           \r\n    }else{\r\n          clearInputs();\r\n    }\r\n\r\n\r\n  },[modalType,id])\r\n\r\n\r\n\r\n\r\nconst updateEmpData = (id,token,empName,project,backupDestination,lastUpdate,isChecked)=>{\r\n  const data = {\r\n    id: id,\r\n    Emp_name:empName,\r\n    project:project,\r\n    last_update:lastUpdate,\r\n    backup_desti:backupDestination,\r\n    status: +isChecked\r\n  }\r\n\r\n  fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 12,\r\n        updateRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"empData\", data);\r\n        getempData(token)\r\n        // alert('Data Updated Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\nconst insertEmpData = (token,empName,project,backupDestination,lastUpdate,isChecked)=>{\r\n    const data = {\r\n      Emp_name:empName,\r\n      project:project,\r\n      last_update:lastUpdate,\r\n      backup_desti:backupDestination,\r\n      status: +isChecked\r\n    }\r\n\r\n\r\n\r\n    console.log('EMP DATA',data);\r\n\r\n    fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 11,\r\n        addRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"empData\", data);\r\n        getempData(token)\r\n\r\n        // alert('Data Added Successfully')\r\n        clearInputs()\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"modal\"\r\n    >\r\n      <Modal.Title id=\"contained-modal-title-vcenter\">\r\n       Employee Data\r\n      </Modal.Title>\r\n\r\n      <Modal.Body>\r\n      <div className=\"row\">\r\n            <div className=\"form-group col-md-6\">\r\n              <label for=\"inputEmail4\">Name</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"Emp Name\" value={empName} onChange={(e) => setempName(e.target.value)}></input>\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              <label for=\"inputPassword4\">Project</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Project\" value={project} onChange={(e)=> setproject(e.target.value)}></input>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"form-group col-md-6\">\r\n              <label for=\"inputEmail4\">Backup Destination</label>\r\n              <input type=\"text\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"Backup Destination\" value={backupDestination} onChange={(e)=> setbackupDestination(e.target.value)}></input>\r\n            </div>\r\n            <div className=\"form-group col-md-6\">\r\n              <label for=\"inputPassword4\">Last Update</label>\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"Last Update\" value={lastUpdate} onChange={(e)=> setlastUpdate(e.target.value)}></input>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"form-group col-md-6 inputCheck\">\r\n              <label for=\"inputEmail4\">Status &nbsp;</label>\r\n              <input type=\"checkbox\" id=\"inputEmail4\" checked={isChecked} onChange={()=> setisChecked(!isChecked)}></input>\r\n            </div>\r\n           \r\n          </div>\r\n          \r\n        \r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        {modalType == 'add' && <Button onClick={()=>{\r\n          props.onHide()\r\n           insertEmpData(token,empName,project,backupDestination,lastUpdate,isChecked)\r\n        }\r\n           \r\n           }>Save</Button>}\r\n        {modalType == 'edit'&& <Button onClick={()=>{\r\n           props.onHide()\r\n           updateEmpData(id,token,empName,project,backupDestination,lastUpdate,isChecked)\r\n        }\r\n           }>Update</Button>}\r\n        <Button  onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction EmpData() {\r\n\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const [filterText, setFilterText] = React.useState(\"\");\r\n  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(\r\n    false\r\n  );\r\n\r\n  const {isloading,token, setmodalType,empData,getempData,setid,isAdmin ,selectedFile,setSelectedFile,importData,show,setShow,getempDataRecord,setempDataRecord,getLatestEmpRecord} = React.useContext(MyContext);\r\n\r\n  \r\n\r\n  React.useEffect(()=>{\r\n    getempData(token)\r\n  },[])\r\n\r\n  //DELETE empData\r\n    const deleteEmpData = (id)=>{\r\n\r\n      fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: token,\r\n        },\r\n        body: queryString.stringify({\r\n          action: 16,\r\n          recordid: id\r\n        }),\r\n      })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            return res.json();\r\n          }\r\n        })\r\n        .then((data) => {\r\n          console.log(\"DELETED\", data);\r\n          // setaddDataSuccess(true)\r\n          getempData(token);\r\n          // setModalShow(false);\r\n          // alert('Data Deleted Successfully')\r\n          \r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n  }\r\n\r\nlet columns = [\r\n  {\r\n     name: 'Emp_name',\r\n     selector: 'Emp_name',\r\n     wrap: true\r\n  },\r\n  {\r\n    name: 'project',\r\n    selector: 'project',\r\n    wrap: true\r\n },\r\n {\r\n  name: 'backup_desti',\r\n  selector: 'backup_desti',\r\n  wrap: true\r\n},\r\n{\r\n  name: 'last_update',\r\n  selector: 'last_update',\r\n  wrap: true\r\n}\r\n]\r\n  // if (empData.length > 0) {\r\n  //   // console.log(empData[0]);\r\n  //   Object.keys(empData[0]).forEach((key) => {\r\n\r\n  //     if (key === \"status\") {\r\n  //       columns.push({\r\n  //         name: key.toUpperCase(),\r\n  //         cell: (row) => (\r\n  //           <input type=\"checkbox\" checked={Boolean(row.status)}></input>\r\n  //           // <p>{console.log('row',row)}</p>\r\n  //         ),\r\n  //       })\r\n  //     }\r\n  //     else if(key === \"id\"){\r\n\r\n  //     }\r\n  //     else{\r\n  //     columns.push({\r\n  //       name: key.toUpperCase(),\r\n  //       selector: key,\r\n  //       wrap: true,\r\n  //     });\r\n  //   }\r\n      \r\n  //   });\r\n  // } \r\n\r\n  columns.unshift({\r\n    name: '#',\r\n    selector: 'key',\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n\r\n  });\r\n\r\n    columns.push({\r\n            name: 'status',\r\n            cell: (row) => (\r\n              <input type=\"checkbox\" checked={Boolean(row.status)}></input>\r\n               // <p>{console.log('row',row)}</p>\r\n           ),\r\n           })\r\nif(isAdmin) {\r\n\r\n\r\n  \r\n  columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => {\r\n        setShow(true)\r\n        setmodalType('addinfo')\r\n        setid(row.id)\r\n        // alert(row.id)\r\n        }}>\r\n          Add Info\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '120px'\r\n  });\r\n\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => {\r\n        setmodalType('showinfo')\r\n        setShow(true)\r\n        setid(row.id)\r\n        alert(row.id)\r\n        setempDataRecord()\r\n        getLatestEmpRecord(token,row.id)\r\n        }}>\r\n          Show Info\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '120px'\r\n  });\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => {\r\n        setModalShow(true)\r\n        setmodalType('edit')\r\n        setid(row.id)\r\n        // alert(row.id)\r\n        }}>\r\n        <AiOutlineEdit/>\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n\r\n\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <>\r\n        <button className=\"btn btn-danger\"\r\n         onClick={()=>{\r\n           setid(row.id)\r\n        \r\n\r\n           let r = window.confirm(\"Are you sure??\"); \r\n           if(r){\r\n            deleteEmpData(row.id)\r\n           }\r\n         }\r\n         }\r\n         ><MdDelete/></button>\r\n      </>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n}\r\n\r\n\r\nempData?.forEach((item,index) => {\r\n  item.key = index + 1\r\n})\r\n\r\n  const filteredItems = empData?.filter(\r\n    (item) =>\r\n      (item.Emp_name &&\r\n        item.Emp_name.toLowerCase().includes(filterText.toLowerCase()))\r\n  );\r\n\r\n  // const toggleModal = () => {\r\n  //   setModalShow(true);\r\n  //   console.log(\"modalShow\", modalShow);\r\n  // };\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    const handleClear = () => {\r\n      if (filterText) {\r\n        setResetPaginationToggle(!resetPaginationToggle);\r\n        setFilterText(\"\");\r\n      }\r\n    };\r\n\r\n\r\n    const changeHandler = (event) => {\r\n      console.log('event.target.files',event.target.files[0])\r\n      setSelectedFile(event.target.files[0]);\r\n      // setisFilePicked(true);\r\n    };\r\n\r\n\r\n    return (\r\n      <div className=\"btn-container\">\r\n         {isAdmin && <div><input type=\"file\" name=\"file\" onChange={changeHandler}></input><button className=\"btn btn-primary\" onClick={()=> importData(token,4,selectedFile)}>Import</button></div>}\r\n        {isAdmin && <button\r\n        className=\"btn btn-primary\"\r\n        onClick={() =>{\r\n              setModalShow(true)\r\n              setmodalType('add')\r\n\r\n        }         \r\n          }\r\n           >Add Data</button>}\r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n        <FilterComponent\r\n          onFilter={(e) => setFilterText(e.target.value)}\r\n          onClear={handleClear}\r\n          filterText={filterText}\r\n        />\r\n      </div>\r\n    );\r\n  }, [filterText, resetPaginationToggle, modalShow,selectedFile]);\r\n\r\n  \r\n  createTheme('solarized', {\r\n    text: {\r\n      primary: 'rgba(0,0,0)',\r\n      secondary: '#fff',\r\n    },\r\n    background: {\r\n      // default: '#002b36',\r\n    },\r\n    context: {\r\n      background: '#cb4b16',\r\n      text: '#FFFFFF',\r\n    },\r\n    divider: {\r\n      default: 'rgba(0,0,0,.7)',\r\n    },\r\n    action: {\r\n      button: 'rgba(0,0,0,.54)',\r\n      hover: 'rgba(0,0,0,.08)',\r\n      disabled: 'rgba(0,0,0,.12)',\r\n    },\r\n  });\r\n  const newCol = columns.filter(col => col.name !== '#')\r\n  console.log('fsfsfsfsf',newCol);\r\n  return (\r\n    <>\r\n    \r\n     <DataTableExtensions\r\n       columns={columns}\r\n       data={empData}\r\n       exportHeaders= {true}\r\n      >\r\n      <DataTable\r\n        title=\"Running Websites on Server\"\r\n        columns={columns}\r\n        data={filteredItems}\r\n        pagination\r\n        paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1\r\n        subHeader\r\n        subHeaderComponent={subHeaderComponentMemo}\r\n        persistTableHead\r\n        progressPending={isloading}\r\n        // theme= 'solarized'\r\n      />\r\n      </DataTableExtensions>\r\n      <EmpRecordModal/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmpData;","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\DbBackup.js",["108","109","110","111","112","113","114","115","116","117"],"import React from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport { MyContext } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport DataTable,{createTheme} from \"react-data-table-component\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport \"./Home.css\";\r\nimport queryString from \"query-string\";\r\n\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\n\r\n\r\nconst TextField = styled.input`\r\n  height: 32px;\r\n  width: 200px;\r\n  border-radius: 3px;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border: 1px solid #e5e5e5;\r\n  padding: 0 32px 0 16px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst FilterComponent = ({ filterText, onFilter, onClear }) => (\r\n  <>\r\n    <TextField\r\n      id=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Filter By Name\"\r\n      aria-label=\"Search Input\"\r\n      value={filterText}\r\n      onChange={onFilter}\r\n    />\r\n    <button className=\"clear-btn\" type=\"button\" onClick={onClear}>\r\n      X\r\n    </button>\r\n  </>\r\n);\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n\r\n \r\n\r\nconst {isChecked,setisChecked,dbData,id,getdbData,token,dbBackupIp,setdbBackupIp,dbBackupPath,setdbBackupPath,dbCountry,setdbCountry,dbName,setdbName,dbIp,setdbIp,dbOperator,setdbOperator,dbSizeOnDesti,setdbSizeOnDesti,dbSizeOnSource,setdbSizeOnSource,modalType,clearInputs} = React.useContext(MyContext)\r\n  \r\nReact.useEffect(()=>{\r\n    \r\n\r\n  if(dbData && dbData.length !== 0 && id && modalType ==\"edit\" ){\r\n    console.log('sslData Data',dbData);\r\n    const filteredData = dbData.filter(data => data.id == id)\r\n    // console.log('Filtered Data',filteredData[0]);\r\n  if(filteredData.length !==0){\r\n    setdbBackupIp(filteredData[0].backup_ip)\r\n    setdbBackupPath(filteredData[0].backup_path)\r\n    setdbCountry(filteredData[0].country)\r\n    setdbName(filteredData[0].db_name)\r\n    setdbIp(filteredData[0].ip)\r\n    setdbOperator(filteredData[0].operator)\r\n    setdbSizeOnDesti(filteredData[0].size_on_Desti)\r\n    setdbSizeOnSource(filteredData[0].size_on_source)\r\n    setisChecked(filteredData[0].status)\r\n    \r\n  }\r\n         \r\n  }else{\r\n       clearInputs()\r\n  }\r\n\r\n\r\n},[modalType,id])\r\n\r\n// console.log('AAAA',{\r\n//   db_name : dbName,\r\n//   ip: dbIp,\r\n//   operator: dbOperator,\r\n//   country: dbCountry,\r\n//   size_on_source: dbSizeOnSource,\r\n//   size_on_Desti: dbSizeOnDesti,\r\n//   backup_path: dbBackupPath,\r\n//   backup_ip: dbBackupIp,\r\n// });\r\n\r\nconst updateDbData = (id,token,dbName,dbIp,dbOperator,dbCountry,dbSizeOnSource,dbSizeOnDesti,dbBackupPath,dbBackupIp,isChecked)=>{\r\n  const data = {\r\n    db_name : dbName,\r\n    id: id,\r\n    ip: dbIp,\r\n    operator: dbOperator,\r\n    country: dbCountry,\r\n    size_on_source: dbSizeOnSource,\r\n    size_on_Desti: dbSizeOnDesti,\r\n    backup_path: dbBackupPath,\r\n    backup_ip: dbBackupIp,\r\n    status: +isChecked\r\n  }\r\n\r\n  fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 9,\r\n        updateRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"UpDATE DB DATA\", data);\r\n        getdbData(token)\r\n        alert('Data Updated Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\nconst insertDbData = (token,dbName,dbIp,dbOperator,dbCountry,dbSizeOnSource,dbSizeOnDesti,dbBackupPath,dbBackupIp,isChecked)=>{\r\n    const data = {\r\n      db_name : dbName,\r\n      ip: dbIp,\r\n      operator: dbOperator,\r\n      country: dbCountry,\r\n      size_on_source: dbSizeOnSource,\r\n      size_on_Desti: dbSizeOnDesti,\r\n      backup_path: dbBackupPath,\r\n      backup_ip: dbBackupIp,\r\n      status: +isChecked\r\n    }\r\n\r\n    // console.log('INSERT DB DATA',data);\r\nhttps://webinfo-api.genmail.online\r\n    fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 8,\r\n        addRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        // console.log(\"DBDATA\", data);\r\n        clearInputs()\r\n        getdbData(token)\r\n        // alert('Data Added Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"modal\"\r\n    >\r\n      <Modal.Title id=\"contained-modal-title-vcenter\">\r\n       DB Backup Data\r\n      </Modal.Title>\r\n\r\n      <Modal.Body>\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Database Name</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Database Name\"\r\n              value={dbName}\r\n              onChange={(e)=> setdbName(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">IP</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputPassword4\"\r\n              placeholder=\"IP\"\r\n              value={dbIp}\r\n              onChange={(e)=> setdbIp(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Operator</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"Operator\"\r\n              value={dbOperator}\r\n              onChange={(e)=>{setdbOperator(e.target.value)}}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Country</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              value={dbCountry}\r\n              onChange={(e) => setdbCountry(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Backup Path</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"Backup Path<\"\r\n              value={dbBackupPath}\r\n              onChange={(e) => setdbBackupPath(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Backup IP</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputPassword4\"\r\n              placeholder=\"Backup IP\"\r\n              value={dbBackupIp}\r\n              onChange={(e) => setdbBackupIp(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputEmail4\">Size on Source</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"Size on Source\"\r\n              value={dbSizeOnSource}\r\n              onChange={(e) => setdbSizeOnSource(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-group col-md-6\">\r\n            <label for=\"inputPassword4\">Size on Destination</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"inputPassword4\"\r\n              placeholder=\"Size on Destination\"\r\n              value={dbSizeOnDesti}\r\n              onChange={(e) => setdbSizeOnDesti(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"form-group col-md-6 inputCheck\">\r\n            <label for=\"inputEmail4\">Status &nbsp;</label>\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"inputEmail4\"\r\n              placeholder=\"Size on Source\"\r\n              checked={isChecked}\r\n              onChange={() => setisChecked(!isChecked)}\r\n            ></input>\r\n          </div>\r\n        </div>\r\n\r\n      \r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        {modalType == 'add' && <Button onClick={()=> {\r\n          insertDbData(token,dbName,dbIp,dbOperator,dbCountry,dbSizeOnSource,dbSizeOnDesti,dbBackupPath,dbBackupIp,isChecked)\r\n          props.onHide()\r\n          }}>Save</Button>}\r\n        {modalType == 'edit' && <Button onClick={\r\n          ()=> {\r\n          updateDbData(id,token,dbName,dbIp,dbOperator,dbCountry,dbSizeOnSource,dbSizeOnDesti,dbBackupPath,dbBackupIp,isChecked)\r\n          props.onHide()\r\n        }\r\n          }>Update</Button>}\r\n  \r\n        <Button  onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction DbBackup() {\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const { dbBackupData, isloading,dbData,setDbData,token,getdbData , setmodalType,setid,isAdmin,selectedFile,setSelectedFile,importData} = React.useContext(MyContext);\r\n\r\n  React.useEffect(() =>{\r\n    getdbData(token)\r\n    // console.log('DBDAAAATATATA',dbData);\r\n  },[])\r\n\r\n  const deleteDbData = (id)=>{\r\n\r\n    fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 15,\r\n        recordid: id\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"DELETED\", data);\r\n        // setaddDataSuccess(true)\r\n        getdbData(token);\r\n        // setModalShow(false);\r\n        // alert('Data Deleted Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\n\r\n  let columns = [\r\n    {\r\n      name: 'db_name',\r\n      selector: 'db_name',\r\n      wrap: true,\r\n      width: '170px'\r\n    },\r\n    {\r\n      name: 'size_on_source',\r\n      selector: 'size_on_source',\r\n      wrap: true\r\n    },\r\n    {\r\n      name: 'ip',\r\n      selector: 'ip',\r\n      wrap: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'backup_ip',\r\n      selector: 'backup_ip',\r\n      wrap: true,\r\n      width: '140px'\r\n    },\r\n    {\r\n      name: 'backup_path',\r\n      selector: 'backup_path',\r\n      wrap: true,\r\n      width: '340px'\r\n    },\r\n    {\r\n      name: 'country',\r\n      selector: 'country',\r\n      wrap: true\r\n    },\r\n    {\r\n      name: 'operator',\r\n      selector: 'operator',\r\n      wrap: true\r\n    },\r\n  \r\n   \r\n    {\r\n      name: 'size_on_Desti',\r\n      selector: 'size_on_Desti',\r\n      wrap: true\r\n    },\r\n  \r\n \r\n  ];\r\n\r\n  columns.push({\r\n            name: 'STATUS',\r\n            cell: (row) => (\r\n              <input type=\"checkbox\" checked={Boolean(row.status)} className=\"checkbox\"></input>\r\n               // <p>{console.log('row',row)}</p>\r\n           ),\r\n           })\r\n\r\n  // if (dbData.length > 0) {\r\n  //   console.log(dbData[0]);\r\n  //   Object.keys(dbData[0]).forEach((key) => {\r\n\r\n  //     if (key === \"status\") {\r\n  //       columns.push({\r\n  //         name: key.toUpperCase(),\r\n  //         cell: (row) => (\r\n  //           <input type=\"checkbox\" checked={Boolean(row.status)}></input>\r\n  //           // <p>{console.log('row',row)}</p>\r\n  //         ),\r\n  //       })\r\n  //     }else if(key == \"id\"){\r\n\r\n  //     }\r\n   \r\n  //     else{\r\n  //         columns.push({\r\n  //           name: key.toUpperCase(),\r\n  //           selector: key,\r\n  //           wrap: true,\r\n  //         });\r\n  //     }\r\n  //     console.log(key);\r\n  //     // else{}\r\n    \r\n  //   });\r\n  // }\r\n\r\n  columns.unshift({\r\n    name: '#',\r\n    selector: 'key',\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n\r\n  });\r\n\r\n  if(isAdmin){\r\n  columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => \r\n        {\r\n          setid(row.id)\r\n          setModalShow(true)\r\n          setmodalType('edit')\r\n        }\r\n     \r\n      }>\r\n        <AiOutlineEdit/>\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <>\r\n        <button className=\"btn btn-danger\"\r\n         onClick={() => {\r\n         \r\n           let r = window.confirm(\"Are you sure??\"); \r\n           if(r){\r\n            deleteDbData(row.id)\r\n           }\r\n         }}\r\n        ><MdDelete/></button>\r\n      </>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n}\r\n  console.log(\"COLUMNS: \", columns);\r\n  console.log(\"dbBackupData\", dbBackupData);\r\n\r\n  const [filterText, setFilterText] = React.useState(\"\");\r\n\r\n  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(\r\n    false\r\n  );\r\n\r\n  dbData?.forEach((item,index) => {\r\n    item.key = index + 1\r\n  })\r\n\r\n\r\n  const filteredItems = dbData?.filter(\r\n    (item) =>\r\n      (item.db_name &&\r\n        item.db_name.toLowerCase().includes(filterText.toLowerCase()))\r\n  );\r\n\r\n  // const toggleModal = () => {\r\n  //   setModalShow(true);\r\n  //   console.log(\"modalShow\", modalShow);\r\n  // };\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n\r\n\r\n    const handleClear = () => {\r\n      if (filterText) {\r\n        setResetPaginationToggle(!resetPaginationToggle);\r\n        setFilterText(\"\");\r\n      }\r\n    };\r\n\r\n    const changeHandler = (event) => {\r\n      console.log('event.target.files',event.target.files[0])\r\n      setSelectedFile(event.target.files[0]);\r\n      // setisFilePicked(true);\r\n    };\r\n\r\n    console.log(\"modalShow\", modalShow);\r\n    return (\r\n      <div className=\"btn-container\">\r\n    {isAdmin && <div><input type=\"file\" name=\"file\" onChange={changeHandler}></input><button className=\"btn btn-primary\" onClick={()=> importData(token,3,selectedFile)}>Import</button></div>}\r\n       {isAdmin && <button\r\n       className=\"btn btn-primary\"\r\n       onClick={() =>{ \r\n          setModalShow(true)\r\n          setmodalType('add')\r\n        }}>Add Data</button>}\r\n\r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n        <FilterComponent\r\n          onFilter={(e) => setFilterText(e.target.value)}\r\n          onClear={handleClear}\r\n          filterText={filterText}\r\n        />\r\n      </div>\r\n    );\r\n  }, [filterText, resetPaginationToggle, modalShow, selectedFile]);\r\n\r\n  \r\n  createTheme('solarized', {\r\n    text: {\r\n      primary: 'rgba(0,0,0)',\r\n      secondary: '#fff',\r\n    },\r\n    background: {\r\n      // default: '#002b36',\r\n    },\r\n    context: {\r\n      background: '#cb4b16',\r\n      text: '#FFFFFF',\r\n    },\r\n    divider: {\r\n      default: 'rgba(0,0,0,.7)',\r\n    },\r\n    action: {\r\n      button: 'rgba(0,0,0,.54)',\r\n      hover: 'rgba(0,0,0,.08)',\r\n      disabled: 'rgba(0,0,0,.12)',\r\n    },\r\n  });\r\n  const newCol = columns.filter(col => col.name !== '#')\r\n  console.log('fsfsfsfsf',newCol);\r\n  return (\r\n    <>\r\n     <DataTableExtensions\r\n       columns={columns}\r\n       data={filteredItems}\r\n       exportHeaders= {true}\r\n      >\r\n      <DataTable\r\n        title=\"Database Backup\"\r\n        columns={columns}\r\n        data={filteredItems}\r\n        pagination\r\n        paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1\r\n        subHeader\r\n        subHeaderComponent={subHeaderComponentMemo}\r\n        persistTableHead\r\n        progressPending={isloading}\r\n        theme= 'solarized'\r\n      />\r\n      </DataTableExtensions>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DbBackup;\r\n","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\SSLData.js",["118","119","120","121","122","123","124","125","126","127","128"],"import React,{useState} from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport { MyContext } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport DataTable,{createTheme} from \"react-data-table-component\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport \"./Home.css\";\r\n\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\n\r\n\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { AiOutlineEdit } from \"react-icons/ai\";\r\n\r\nconst TextField = styled.input`\r\n  height: 32px;\r\n  width: 200px;\r\n  border-radius: 3px;\r\n  border-top-left-radius: 5px;\r\n  border-bottom-left-radius: 5px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  border: 1px solid #e5e5e5;\r\n  padding: 0 32px 0 16px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst FilterComponent = ({ filterText, onFilter, onClear }) => (\r\n  <>\r\n    <TextField\r\n      id=\"search\"\r\n      type=\"text\"\r\n      placeholder=\"Filter By Name\"\r\n      aria-label=\"Search Input\"\r\n      value={filterText}\r\n      onChange={onFilter}\r\n    />\r\n    <button className=\"clear-btn\" type=\"button\" onClick={onClear}>\r\n      X\r\n    </button>\r\n  </>\r\n);\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n\r\n  const {modalType,token,getSslData,id,sslData,sslUrl,setsslUrl,path,setpath,sslDate,setsslDate,clearInputs,setModalShow} = React.useContext(MyContext)\r\n\r\n\r\n\r\n  React.useEffect(()=>{\r\n    \r\n\r\n    if(sslData && sslData.length !== 0 && id && modalType ==\"edit\" ){\r\n      console.log('sslData Data',sslData);\r\n      const filteredData = sslData.filter(data => data.id == id)\r\n\r\n      \r\n\r\n\r\n      console.log('Filtered Data',filteredData);\r\n\r\n      setsslUrl(filteredData[0].ssl_url);\r\n      setpath(filteredData[0].path);\r\n      setsslDate(filteredData[0].ssl_date);\r\n           \r\n    }else{\r\n       clearInputs()\r\n    }\r\n\r\n\r\n  },[modalType,id])\r\n\r\n\r\n\r\n\r\nconst updateSslData = (token,id,sslUrl,path,sslDate)=>{\r\n  const data = {\r\n    id: id,\r\n    ssl_url:sslUrl,\r\n    path:path,\r\n    ssl_date:sslDate\r\n  }\r\n\r\n  fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 6,\r\n        updateRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"SSLDATA\", data);\r\n        getSslData(token)\r\n\r\n        // alert('Data Updated Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\nconst insertSslData = (token,sslUrl,path,sslDate)=>{\r\n    const data = {\r\n      ssl_url:sslUrl,\r\n      path:path,\r\n      ssl_date:sslDate\r\n    }\r\n\r\n    clearInputs() \r\n\r\n    fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        token: token,\r\n      },\r\n      body: queryString.stringify({\r\n        action: 5,\r\n        addRecord: JSON.stringify(data)\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          return res.json();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        console.log(\"SSLDATA\", data);\r\n        getSslData(token)\r\n  \r\n        // alert('Data Added Successfully')\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n}\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      className=\"modal\"\r\n    >\r\n      <Modal.Title id=\"contained-modal-title-vcenter\">\r\n        Modal heading\r\n      </Modal.Title>\r\n\r\n      <Modal.Body>\r\n          <div className=\"row\">\r\n            <div className=\"form-group col\">\r\n              <label for=\"inputEmail4\">Site URL</label>\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"URL\" value={sslUrl} onChange={(e)=>setsslUrl(e.target.value)}></input>\r\n            </div>\r\n           \r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"form-group col\">\r\n              <label for=\"inputPassword4\">Path</label>\r\n              <input type=\"text\" className=\"form-control\" placeholder=\"Path\" value={path} onChange={(e)=>setpath(e.target.value)}></input>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"form-group col\">\r\n              <label for=\"inputEmail4\">SSL Date</label>\r\n              <input type=\"date\" className=\"form-control\" placeholder=\"SSL Date\" value={sslDate} onChange={(e)=> setsslDate(e.target.value)} required></input>\r\n            </div>\r\n          </div>\r\n\r\n          \r\n        \r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        {modalType == 'add' && <Button \r\n        onClick={()=>{\r\n          props.onHide()\r\n           insertSslData(token,sslUrl,path,sslDate)\r\n          \r\n        }}\r\n        >Save</Button>}\r\n        {modalType == 'edit'&& <Button onClick={()=> {\r\n          // {console.log(ModalShow)}\r\n          props.onHide()\r\n          updateSslData(token,id,sslUrl,path,sslDate)\r\n\r\n          }}>Update</Button>}\r\n        <Button  onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nfunction SSLData() {\r\n\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const [filterText, setFilterText] = React.useState(\"\");\r\n  const [resetPaginationToggle, setResetPaginationToggle] = React.useState(\r\n    false\r\n  );\r\n \r\n\r\n\r\n  const {isloading,token, setmodalType,sslData,getSslData,setid,setssl,setexpiredSSL,isAdmin, selectedFile,setSelectedFile,importData } = React.useContext(MyContext);\r\n\r\n  \r\n\r\n  React.useEffect(()=>{\r\n  \r\n    getSslData(token)\r\n    \r\n  },[])\r\n\r\n  //DELETE SSLData\r\n    const deleteSslData = (id)=>{\r\n\r\n      fetch(\"https://webinfo-api.genmail.online/Urls\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: token,\r\n        },\r\n        body: queryString.stringify({\r\n          action: 14,\r\n          recordid: id\r\n        }),\r\n      })\r\n        .then((res) => {\r\n          if (res.status === 200) {\r\n            return res.json();\r\n          }\r\n        })\r\n        .then((data) => {\r\n          // console.log(\"DELETED\", data);\r\n          // setaddDataSuccess(true)\r\n          getSslData(token);\r\n          // setModalShow(false);\r\n          // alert('Data Deleted Successfully')\r\n          \r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n  }\r\n      \r\n  let columns = [\r\n    {\r\n      name: 'ssl_url',\r\n      selector: 'ssl_url',\r\n      wrap: true,\r\n      width: '320px'\r\n    },\r\n    {\r\n      name: 'path',\r\n      selector: 'path',\r\n      wrap: true,\r\n      width: '350px'\r\n    },\r\n    {\r\n      name: 'ssl_date',\r\n      selector: 'ssl_date',\r\n      wrap: true,\r\n      // width: '150px'\r\n    },\r\n  ];\r\n  // if (sslData.length > 0) {\r\n  //   console.log(sslData[0]);\r\n  //   Object.keys(sslData[0]).forEach((key) => {\r\n\r\n  //     if (key === \"id\"){\r\n        \r\n  //     }else{\r\n  //     columns.push({\r\n  //       name: key.toUpperCase(),\r\n  //       selector: key,\r\n  //       wrap: true,\r\n  //     });\r\n  //   }\r\n      \r\n  //   });\r\n  // } \r\n\r\n  columns.unshift({\r\n    name: '#',\r\n    selector: 'key',\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    width: '80px'\r\n\r\n  });\r\n\r\n  if(isAdmin){\r\n    columns.push({\r\n    cell: (row) => (\r\n      <button className=\"btn btn-dark\" onClick={() => {\r\n        setModalShow(true)\r\n        setmodalType('edit')\r\n        setid(row.id)\r\n        // alert(row.id)\r\n        }}>\r\n       <AiOutlineEdit/>\r\n      </button>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n\r\n  columns.push({\r\n    cell: (row) => (\r\n      <>\r\n        <button className=\"btn btn-danger\"\r\n         onClick={()=>{\r\n           setid(row.id)\r\n       \r\n\r\n           let r = window.confirm(\"Are you sure??\"); \r\n           if(r){\r\n            deleteSslData(row.id)\r\n           }\r\n         }\r\n         }\r\n         ><MdDelete/></button>\r\n      </>\r\n    ),\r\n    ignoreRowClick: true,\r\n    allowOverflow: true,\r\n    button: true,\r\n    width: '60px'\r\n  });\r\n\r\n}\r\n  \r\nsslData?.forEach((item,index) => {\r\n  item.key = index + 1\r\n})\r\n\r\n  const filteredItems = sslData?.filter(\r\n    (item) =>\r\n      (item.path && item.ssl_url && item.ssl_url.toLowerCase().includes(filterText.toLowerCase()))\r\n  );\r\n  \r\n\r\n\r\n\r\n  // const toggleModal = () => {\r\n  //   setModalShow(true);\r\n  //   console.log(\"modalShow\", modalShow);\r\n  // };\r\n\r\n  const subHeaderComponentMemo = React.useMemo(() => {\r\n    const handleClear = () => {\r\n      if (filterText) {\r\n        setResetPaginationToggle(!resetPaginationToggle);\r\n        setFilterText(\"\");\r\n      }\r\n    };\r\n\r\n    const changeHandler = (event) => {\r\n      console.log('event.target.files',event.target.files[0])\r\n      setSelectedFile(event.target.files[0]);\r\n      // setisFilePicked(true);\r\n    };\r\n\r\n\r\n    return (\r\n      <div className=\"btn-container\">\r\n         {isAdmin && <div><input type=\"file\" name=\"file\" onChange={changeHandler}></input><button className=\"btn btn-primary\" onClick={()=> importData(token,2,selectedFile)}>Import</button></div>}\r\n       {isAdmin && <button \r\n       className=\"btn btn-primary\"\r\n       onClick={() =>{\r\n              setModalShow(true)\r\n              setmodalType('add')\r\n\r\n        }         \r\n          }\r\n           >Add Data</button>}\r\n        <MyVerticallyCenteredModal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n        />\r\n        <FilterComponent\r\n          onFilter={(e) => setFilterText(e.target.value)}\r\n          onClear={handleClear}\r\n          filterText={filterText}\r\n        />\r\n      </div>\r\n    );\r\n  }, [filterText, resetPaginationToggle, modalShow,selectedFile]);\r\n\r\n\r\n  createTheme('solarized', {\r\n    text: {\r\n      primary: 'rgba(0,0,0)',\r\n      secondary: '#fff',\r\n    },\r\n    background: {\r\n      // default: '#002b36',\r\n    },\r\n    context: {\r\n      background: '#cb4b16',\r\n      text: '#FFFFFF',\r\n    },\r\n    divider: {\r\n      default: 'rgba(0,0,0,.7)',\r\n    },\r\n    action: {\r\n      button: 'rgba(0,0,0,.54)',\r\n      hover: 'rgba(0,0,0,.08)',\r\n      disabled: 'rgba(0,0,0,.12)',\r\n    },\r\n  });\r\n  const newCol = columns.filter(col => col.name !== '#')\r\n  console.log('fsfsfsfsf',newCol);\r\n  return (\r\n    <>\r\n     <DataTableExtensions\r\n       columns={columns}\r\n       data={filteredItems}\r\n       exportHeaders= {true}\r\n      >\r\n      <DataTable\r\n        title=\"SSL DATA\"\r\n        columns={columns}\r\n        data={filteredItems}\r\n        pagination\r\n        paginationResetDefaultPage={resetPaginationToggle} // optionally, a hook to reset pagination to page 1\r\n        subHeader\r\n        subHeaderComponent={subHeaderComponentMemo}\r\n        persistTableHead\r\n        progressPending={isloading}\r\n        // theme= 'solarized'\r\n        striped\r\n      />\r\n      </DataTableExtensions>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SSLData;","C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpRecordModal.js",["129","130","131","132","133","134","135"],"C:\\Users\\Genrosys_React\\Desktop\\ReactJS\\web-info\\src\\Components\\EmpRecordTable.js",["136","137","138","139","140","141","142","143","144","145","146"],"import React,{useState} from \"react\";\r\nimport \"../Components/Dashboard.css\";\r\nimport { MyContext } from \"../App\";\r\nimport styled from \"styled-components\";\r\nimport DataTable,{createTheme} from \"react-data-table-component\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport queryString from \"query-string\";\r\nimport \"./Home.css\";\r\nimport EmpRecordModal from \"./EmpRecordModal\";\r\n\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\n\r\n\r\n\r\nfunction EmpRecordTable() {\r\n\r\n    const {empDataRecord} = React.useContext(MyContext)\r\n\r\n    let columns = [\r\n        {\r\n           name: 'Emp_name',\r\n           selector: 'Emp_name',\r\n           wrap: true\r\n        },\r\n        {\r\n          name: 'project',\r\n          selector: 'project',\r\n          wrap: true\r\n       },\r\n       {\r\n        name: 'backup_desti',\r\n        selector: 'backup_desti',\r\n        wrap: true\r\n      },\r\n      {\r\n        name: 'last_update',\r\n        selector: 'last_update',\r\n        wrap: true\r\n      }\r\n      ]\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmpRecordTable\r\n",{"ruleId":"147","severity":1,"message":"148","line":5,"column":25,"nodeType":"149","messageId":"150","endLine":5,"endColumn":30},{"ruleId":"147","severity":1,"message":"151","line":5,"column":32,"nodeType":"149","messageId":"150","endLine":5,"endColumn":36},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"147","severity":1,"message":"156","line":13,"column":10,"nodeType":"149","messageId":"150","endLine":13,"endColumn":26},{"ruleId":"147","severity":1,"message":"157","line":14,"column":10,"nodeType":"149","messageId":"150","endLine":14,"endColumn":23},{"ruleId":"147","severity":1,"message":"158","line":80,"column":10,"nodeType":"149","messageId":"150","endLine":80,"endColumn":24},{"ruleId":"159","severity":1,"message":"160","line":94,"column":14,"nodeType":"161","messageId":"162","endLine":94,"endColumn":16},{"ruleId":"163","severity":1,"message":"164","line":119,"column":6,"nodeType":"165","endLine":119,"endColumn":13,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":209,"column":11,"nodeType":"169","messageId":"170","endLine":209,"endColumn":62},{"ruleId":"171","severity":1,"message":"172","line":720,"column":9,"nodeType":"173","messageId":"174","endLine":720,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":724,"column":24,"nodeType":"161","messageId":"162","endLine":724,"endColumn":26},{"ruleId":"159","severity":1,"message":"160","line":725,"column":19,"nodeType":"161","messageId":"162","endLine":725,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":728,"column":19,"nodeType":"161","messageId":"162","endLine":728,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":731,"column":19,"nodeType":"161","messageId":"162","endLine":731,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":734,"column":19,"nodeType":"161","messageId":"162","endLine":734,"endColumn":21},{"ruleId":"147","severity":1,"message":"175","line":755,"column":9,"nodeType":"149","messageId":"150","endLine":755,"endColumn":22},{"ruleId":"176","severity":1,"message":"177","line":836,"column":9,"nodeType":"178","messageId":"162","endLine":836,"endColumn":20},{"ruleId":"176","severity":1,"message":"179","line":840,"column":59,"nodeType":"178","messageId":"162","endLine":840,"endColumn":62},{"ruleId":"176","severity":1,"message":"180","line":840,"column":63,"nodeType":"178","messageId":"162","endLine":840,"endColumn":69},{"ruleId":"176","severity":1,"message":"181","line":840,"column":70,"nodeType":"178","messageId":"162","endLine":840,"endColumn":80},{"ruleId":"147","severity":1,"message":"182","line":9,"column":5,"nodeType":"149","messageId":"150","endLine":9,"endColumn":15},{"ruleId":"147","severity":1,"message":"183","line":10,"column":5,"nodeType":"149","messageId":"150","endLine":10,"endColumn":10},{"ruleId":"147","severity":1,"message":"184","line":11,"column":5,"nodeType":"149","messageId":"150","endLine":11,"endColumn":13},{"ruleId":"147","severity":1,"message":"185","line":8,"column":10,"nodeType":"149","messageId":"150","endLine":8,"endColumn":23},{"ruleId":"147","severity":1,"message":"151","line":8,"column":40,"nodeType":"149","messageId":"150","endLine":8,"endColumn":44},{"ruleId":"147","severity":1,"message":"186","line":9,"column":10,"nodeType":"149","messageId":"150","endLine":9,"endColumn":27},{"ruleId":"147","severity":1,"message":"187","line":57,"column":5,"nodeType":"149","messageId":"150","endLine":57,"endColumn":10},{"ruleId":"147","severity":1,"message":"188","line":85,"column":5,"nodeType":"149","messageId":"150","endLine":85,"endColumn":17},{"ruleId":"159","severity":1,"message":"160","line":107,"column":60,"nodeType":"161","messageId":"162","endLine":107,"endColumn":62},{"ruleId":"163","severity":1,"message":"189","line":125,"column":5,"nodeType":"165","endLine":125,"endColumn":19,"suggestions":"190"},{"ruleId":"159","severity":1,"message":"160","line":278,"column":16,"nodeType":"161","messageId":"162","endLine":278,"endColumn":18},{"ruleId":"147","severity":1,"message":"191","line":328,"column":73,"nodeType":"149","messageId":"150","endLine":328,"endColumn":84},{"ruleId":"147","severity":1,"message":"192","line":328,"column":99,"nodeType":"149","messageId":"150","endLine":328,"endColumn":108},{"ruleId":"147","severity":1,"message":"193","line":328,"column":109,"nodeType":"149","messageId":"150","endLine":328,"endColumn":116},{"ruleId":"147","severity":1,"message":"194","line":328,"column":117,"nodeType":"149","messageId":"150","endLine":328,"endColumn":127},{"ruleId":"147","severity":1,"message":"195","line":328,"column":168,"nodeType":"149","messageId":"150","endLine":328,"endColumn":180},{"ruleId":"163","severity":1,"message":"196","line":534,"column":6,"nodeType":"165","endLine":534,"endColumn":65,"suggestions":"197"},{"ruleId":"147","severity":1,"message":"185","line":5,"column":10,"nodeType":"149","messageId":"150","endLine":5,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":5,"column":25,"nodeType":"149","messageId":"150","endLine":5,"endColumn":30},{"ruleId":"147","severity":1,"message":"198","line":5,"column":32,"nodeType":"149","messageId":"150","endLine":5,"endColumn":38},{"ruleId":"147","severity":1,"message":"199","line":9,"column":5,"nodeType":"149","messageId":"150","endLine":9,"endColumn":9},{"ruleId":"147","severity":1,"message":"200","line":3,"column":15,"nodeType":"149","messageId":"150","endLine":3,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":61,"column":59,"nodeType":"161","messageId":"162","endLine":61,"endColumn":61},{"ruleId":"159","severity":1,"message":"160","line":63,"column":59,"nodeType":"161","messageId":"162","endLine":63,"endColumn":61},{"ruleId":"163","severity":1,"message":"201","line":79,"column":5,"nodeType":"165","endLine":79,"endColumn":19,"suggestions":"202"},{"ruleId":"159","severity":1,"message":"160","line":210,"column":20,"nodeType":"161","messageId":"162","endLine":210,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":216,"column":20,"nodeType":"161","messageId":"162","endLine":216,"endColumn":22},{"ruleId":"147","severity":1,"message":"203","line":236,"column":114,"nodeType":"149","messageId":"150","endLine":236,"endColumn":118},{"ruleId":"147","severity":1,"message":"204","line":236,"column":127,"nodeType":"149","messageId":"150","endLine":236,"endColumn":143},{"ruleId":"163","severity":1,"message":"205","line":242,"column":5,"nodeType":"165","endLine":242,"endColumn":7,"suggestions":"206"},{"ruleId":"163","severity":1,"message":"207","line":479,"column":6,"nodeType":"165","endLine":479,"endColumn":65,"suggestions":"208"},{"ruleId":"159","severity":1,"message":"160","line":59,"column":55,"nodeType":"161","messageId":"162","endLine":59,"endColumn":57},{"ruleId":"159","severity":1,"message":"160","line":61,"column":56,"nodeType":"161","messageId":"162","endLine":61,"endColumn":58},{"ruleId":"163","severity":1,"message":"209","line":81,"column":3,"nodeType":"165","endLine":81,"endColumn":17,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":149,"column":1,"nodeType":"213","messageId":"214","endLine":175,"endColumn":10},{"ruleId":"215","severity":1,"message":"216","line":149,"column":1,"nodeType":"149","messageId":"217","endLine":149,"endColumn":6},{"ruleId":"159","severity":1,"message":"160","line":307,"column":20,"nodeType":"161","messageId":"162","endLine":307,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":311,"column":20,"nodeType":"161","messageId":"162","endLine":311,"endColumn":22},{"ruleId":"147","severity":1,"message":"218","line":326,"column":42,"nodeType":"149","messageId":"150","endLine":326,"endColumn":51},{"ruleId":"163","severity":1,"message":"219","line":331,"column":5,"nodeType":"165","endLine":331,"endColumn":7,"suggestions":"220"},{"ruleId":"163","severity":1,"message":"207","line":564,"column":6,"nodeType":"165","endLine":564,"endColumn":66,"suggestions":"221"},{"ruleId":"147","severity":1,"message":"200","line":1,"column":15,"nodeType":"149","messageId":"150","endLine":1,"endColumn":23},{"ruleId":"147","severity":1,"message":"188","line":51,"column":109,"nodeType":"149","messageId":"150","endLine":51,"endColumn":121},{"ruleId":"159","severity":1,"message":"160","line":58,"column":59,"nodeType":"161","messageId":"162","endLine":58,"endColumn":61},{"ruleId":"159","severity":1,"message":"160","line":60,"column":59,"nodeType":"161","messageId":"162","endLine":60,"endColumn":61},{"ruleId":"163","severity":1,"message":"222","line":76,"column":5,"nodeType":"165","endLine":76,"endColumn":19,"suggestions":"223"},{"ruleId":"159","severity":1,"message":"160","line":194,"column":20,"nodeType":"161","messageId":"162","endLine":194,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":201,"column":20,"nodeType":"161","messageId":"162","endLine":201,"endColumn":22},{"ruleId":"147","severity":1,"message":"224","line":224,"column":65,"nodeType":"149","messageId":"150","endLine":224,"endColumn":71},{"ruleId":"147","severity":1,"message":"225","line":224,"column":72,"nodeType":"149","messageId":"150","endLine":224,"endColumn":85},{"ruleId":"163","severity":1,"message":"226","line":232,"column":5,"nodeType":"165","endLine":232,"endColumn":7,"suggestions":"227"},{"ruleId":"163","severity":1,"message":"207","line":410,"column":6,"nodeType":"165","endLine":410,"endColumn":65,"suggestions":"228"},{"ruleId":"147","severity":1,"message":"229","line":5,"column":19,"nodeType":"149","messageId":"150","endLine":5,"endColumn":30},{"ruleId":"147","severity":1,"message":"230","line":10,"column":64,"nodeType":"149","messageId":"150","endLine":10,"endColumn":76},{"ruleId":"159","severity":1,"message":"160","line":26,"column":52,"nodeType":"161","messageId":"162","endLine":26,"endColumn":54},{"ruleId":"163","severity":1,"message":"231","line":35,"column":4,"nodeType":"165","endLine":35,"endColumn":8,"suggestions":"232"},{"ruleId":"159","severity":1,"message":"160","line":136,"column":21,"nodeType":"161","messageId":"162","endLine":136,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":184,"column":22,"nodeType":"161","messageId":"162","endLine":184,"endColumn":24},{"ruleId":"159","severity":1,"message":"160","line":230,"column":19,"nodeType":"161","messageId":"162","endLine":230,"endColumn":21},{"ruleId":"147","severity":1,"message":"200","line":1,"column":15,"nodeType":"149","messageId":"150","endLine":1,"endColumn":23},{"ruleId":"147","severity":1,"message":"233","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":14},{"ruleId":"147","severity":1,"message":"234","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":17},{"ruleId":"147","severity":1,"message":"229","line":5,"column":19,"nodeType":"149","messageId":"150","endLine":5,"endColumn":30},{"ruleId":"147","severity":1,"message":"235","line":6,"column":10,"nodeType":"149","messageId":"150","endLine":6,"endColumn":15},{"ruleId":"147","severity":1,"message":"236","line":6,"column":17,"nodeType":"149","messageId":"150","endLine":6,"endColumn":23},{"ruleId":"147","severity":1,"message":"237","line":7,"column":8,"nodeType":"149","messageId":"150","endLine":7,"endColumn":19},{"ruleId":"147","severity":1,"message":"238","line":9,"column":8,"nodeType":"149","messageId":"150","endLine":9,"endColumn":22},{"ruleId":"147","severity":1,"message":"239","line":11,"column":8,"nodeType":"149","messageId":"150","endLine":11,"endColumn":27},{"ruleId":"147","severity":1,"message":"240","line":18,"column":12,"nodeType":"149","messageId":"150","endLine":18,"endColumn":25},{"ruleId":"147","severity":1,"message":"241","line":20,"column":9,"nodeType":"149","messageId":"150","endLine":20,"endColumn":16},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","no-native-reassign",["242"],"no-negated-in-lhs",["243"],"'tokenExpiaryDate' is assigned a value but never used.","'isTokenExpied' is assigned a value but never used.","'addDataSuccess' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'isAdmin'. Either include it or remove the dependency array.","ArrayExpression",["244"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'filterRecords' is assigned a value but never used.","no-dupe-keys","Duplicate key 'setSiteData'.","ObjectExpression","Duplicate key 'ssl'.","Duplicate key 'setssl'.","Duplicate key 'expiredSSL'.","'isLoggedin' is assigned a value but never used.","'token' is assigned a value but never used.","'settoken' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'ButtonExportExcel' is defined but never used.","'setid' is assigned a value but never used.","'setModalShow' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'clearInputs', 'setbackupIp', 'setbackupPath', 'setbackupSize', 'setcountry', 'setip', 'setisChecked', 'setoperator', 'setsitePath', 'setsitePort', 'setsiteUrl', 'setsizeFolder', and 'siteData'. Either include them or remove the dependency array.",["245"],"'clearInputs' is assigned a value but never used.","'setsslUrl' is assigned a value but never used.","'setpath' is assigned a value but never used.","'setsslDate' is assigned a value but never used.","'isFilePicked' is assigned a value but never used.","React Hook React.useMemo has missing dependencies: 'importData', 'isAdmin', 'setModalShow', 'setSelectedFile', 'setisFilePicked', 'setmodalType', and 'token'. Either include them or remove the dependency array.",["246"],"'Switch' is defined but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","React Hook React.useEffect has missing dependencies: 'clearInputs', 'empData', 'setbackupDestination', 'setempName', 'setisChecked', 'setlastUpdate', and 'setproject'. Either include them or remove the dependency array.",["247"],"'show' is assigned a value but never used.","'getempDataRecord' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getempData' and 'token'. Either include them or remove the dependency array.",["248"],"React Hook React.useMemo has missing dependencies: 'importData', 'isAdmin', 'setSelectedFile', 'setmodalType', and 'token'. Either include them or remove the dependency array.",["249"],"React Hook React.useEffect has missing dependencies: 'clearInputs', 'dbData', 'setdbBackupIp', 'setdbBackupPath', 'setdbCountry', 'setdbIp', 'setdbName', 'setdbOperator', 'setdbSizeOnDesti', 'setdbSizeOnSource', and 'setisChecked'. Either include them or remove the dependency array.",["250"],"no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'https:' is defined but never used.","unused","'setDbData' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getdbData' and 'token'. Either include them or remove the dependency array.",["251"],["252"],"React Hook React.useEffect has missing dependencies: 'clearInputs', 'setpath', 'setsslDate', 'setsslUrl', and 'sslData'. Either include them or remove the dependency array.",["253"],"'setssl' is assigned a value but never used.","'setexpiredSSL' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'getSslData' and 'token'. Either include them or remove the dependency array.",["254"],["255"],"'createTheme' is defined but never used.","'setmodalType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'empData'. Either include it or remove the dependency array.",["256"],"'styled' is defined but never used.","'DataTable' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","'queryString' is defined but never used.","'EmpRecordModal' is defined but never used.","'DataTableExtensions' is defined but never used.","'empDataRecord' is assigned a value but never used.","'columns' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"267","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [isAdmin, token]",{"range":"282","text":"283"},"Update the dependencies array to be: [modalType, id, siteData, setbackupSize, setcountry, setip, setoperator, setbackupPath, setsitePath, setsiteUrl, setsizeFolder, setbackupIp, setisChecked, setsitePort, clearInputs]",{"range":"284","text":"285"},"Update the dependencies array to be: [modalShow, isAdmin, filterText, resetPaginationToggle, setSelectedFile, setisFilePicked, importData, token, selectedFile, setmodalType, setModalShow]",{"range":"286","text":"287"},"Update the dependencies array to be: [modalType, id, empData, setempName, setbackupDestination, setproject, setlastUpdate, setisChecked, clearInputs]",{"range":"288","text":"289"},"Update the dependencies array to be: [getempData, token]",{"range":"290","text":"291"},"Update the dependencies array to be: [isAdmin, modalShow, filterText, resetPaginationToggle, setSelectedFile, importData, token, selectedFile, setmodalType]",{"range":"292","text":"293"},"Update the dependencies array to be: [modalType, id, dbData, setdbBackupIp, setdbBackupPath, setdbCountry, setdbName, setdbIp, setdbOperator, setdbSizeOnDesti, setdbSizeOnSource, setisChecked, clearInputs]",{"range":"294","text":"295"},"Update the dependencies array to be: [getdbData, token]",{"range":"296","text":"297"},"Update the dependencies array to be: [modalShow, isAdmin, filterText, resetPaginationToggle, setSelectedFile, importData, token, selectedFile, setmodalType]",{"range":"298","text":"299"},"Update the dependencies array to be: [modalType, id, sslData, setsslUrl, setpath, setsslDate, clearInputs]",{"range":"300","text":"301"},"Update the dependencies array to be: [getSslData, token]",{"range":"302","text":"303"},{"range":"304","text":"293"},"Update the dependencies array to be: [empData, id]",{"range":"305","text":"306"},[3888,3895],"[isAdmin, token]",[3061,3075],"[modalType, id, siteData, setbackupSize, setcountry, setip, setoperator, setbackupPath, setsitePath, setsiteUrl, setsizeFolder, setbackupIp, setisChecked, setsitePort, clearInputs]",[13766,13825],"[modalShow, isAdmin, filterText, resetPaginationToggle, setSelectedFile, setisFilePicked, importData, token, selectedFile, setmodalType, setModalShow]",[2198,2212],"[modalType, id, empData, setempName, setbackupDestination, setproject, setlastUpdate, setisChecked, clearInputs]",[7137,7139],"[getempData, token]",[12479,12538],"[isAdmin, modalShow, filterText, resetPaginationToggle, setSelectedFile, importData, token, selectedFile, setmodalType]",[2377,2391],"[modalType, id, dbData, setdbBackupIp, setdbBackupPath, setdbCountry, setdbName, setdbIp, setdbOperator, setdbSizeOnDesti, setdbSizeOnSource, setisChecked, clearInputs]",[9971,9973],"[getdbData, token]",[15232,15292],"[modalShow, isAdmin, filterText, resetPaginationToggle, setSelectedFile, importData, token, selectedFile, setmodalType]",[1937,1951],"[modalType, id, sslData, setsslUrl, setpath, setsslDate, clearInputs]",[5872,5874],"[getSslData, token]",[9921,9980],[1299,1303],"[empData, id]"]